In [40]: (decoding_loss.permute(1,2,0) * w).permute(2, 0, 1)
Out[40]: 
tensor([[[ 0.6304,  0.6304,  0.6304,  0.6304],
         [ 0.6304,  0.6304,  0.6304,  0.6304],
         [ 0.6304,  0.6304,  0.6304,  0.6304],
         [ 0.6304,  0.6304,  0.6304,  0.6304]],

        [[ 0.1434,  0.1434,  0.1434,  0.1434],
         [ 0.1434,  0.1434,  0.1434,  0.1434],
         [ 0.1434,  0.1434,  0.1434,  0.1434],
         [ 0.1434,  0.1434,  0.1434,  0.1434]],

        [[-2.1005, -2.1005, -2.1005, -2.1005],
         [-2.1005, -2.1005, -2.1005, -2.1005],
         [-2.1005, -2.1005, -2.1005, -2.1005],
         [-2.1005, -2.1005, -2.1005, -2.1005]],

        ...,

        [[-0.6130, -0.6130, -0.6130, -0.6130],
         [-0.6130, -0.6130, -0.6130, -0.6130],
         [-0.6130, -0.6130, -0.6130, -0.6130],
         [-0.6130, -0.6130, -0.6130, -0.6130]],

        [[ 0.1047,  0.1047,  0.1047,  0.1047],
         [ 0.1047,  0.1047,  0.1047,  0.1047],
         [ 0.1047,  0.1047,  0.1047,  0.1047],
         [ 0.1047,  0.1047,  0.1047,  0.1047]],

        [[-0.5280, -0.5280, -0.5280, -0.5280],
         [-0.5280, -0.5280, -0.5280, -0.5280],
         [-0.5280, -0.5280, -0.5280, -0.5280],
         [-0.5280, -0.5280, -0.5280, -0.5280]]])

In [41]: (decoding_loss.permute(1,2,0) * w).permute(2, 0, 1)[0]
Out[41]: 
tensor([[0.6304, 0.6304, 0.6304, 0.6304],
        [0.6304, 0.6304, 0.6304, 0.6304],
        [0.6304, 0.6304, 0.6304, 0.6304],
        [0.6304, 0.6304, 0.6304, 0.6304]])

In [42]: (decoding_loss.permute(1,2,0) * w).permute(2, 0, 1)[1]
Out[42]: 
tensor([[0.1434, 0.1434, 0.1434, 0.1434],
        [0.1434, 0.1434, 0.1434, 0.1434],
        [0.1434, 0.1434, 0.1434, 0.1434],
        [0.1434, 0.1434, 0.1434, 0.1434]])

In [43]: w[0]
Out[43]: tensor(0.6304)

In [44]: w[1]
Out[44]: tensor(0.1434)